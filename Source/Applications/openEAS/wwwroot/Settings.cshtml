@*******************************************************************************************************
    //  Settings.cshtml - Gbtc
    //
    //  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
    //
    //  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
    //  the NOTICE file distributed with this work for additional information regarding copyright ownership.
    //  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
    //  file except in compliance with the License. You may obtain a copy of the License at:
    //
    //      http://opensource.org/licenses/MIT
    //
    //  Unless agreed to in writing, the subject software distributed under the License is distributed on an
    //  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
    //  License for the specific language governing permissions and limitations.
    //
    //  Code Modification History:
    //  ----------------------------------------------------------------------------------------------------
    //  01/15/2016 - J. Ritchie Carroll
    //       Generated original version of source code.
    //
    //*****************************************************************************************************@
@using System
@using System.Threading
@using GSF.Web
@using GSF.Web.Model
@using openEAS.Model
@using openEAS
@using openEASSandBox
@using openXDA.Model

@inherits ExtendedTemplateBase<AppModel>
@section StyleSheets {
    <style>
        html, body {
            height: 100%;
        }
    </style>
}
@{
    DataContext dataContext = ViewBag.DataContext;
    Layout = "Layout.cshtml";
    ViewBag.Title = "Settings";

    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { "LineID", "Name", "text-left" },
    };

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
    ViewBag.HideAddNewButton = false;
    ViewBag.ShowSearchFilter = true;
}
@helper BodyRows()
    {
        <td width="90%" class="text-left valign-middle" nowrap><button type="button" class="btn btn-link" data-bind="text: lookupAssetKeyValue(LineID), click: $parent.viewPageRecord"></button></td>
        <td width="10%" class="text-center valign-middle" nowrap>
            <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>
            <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>
        </td>
}
@helper AddNewEditDialog(DataContext dataContext)
{
    <div class="col-xs-6">
        @Raw(dataContext.AddSelectField<CSALineSetting, Line>("LineID", "ID", "AssetKey"))
        @Raw(dataContext.AddInputField<CSALineSetting>("ITHDLimit"))
        @Raw(dataContext.AddInputField<CSALineSetting>("NominalVoltage"))
        @Raw(dataContext.AddInputField<CSALineSetting>("UnloadedCurrent"))
    </div>
    <div class="col-xs-6">
        @Raw(dataContext.AddInputField<CSALineSetting>("NominalBuskVLL"))
        @Raw(dataContext.AddInputField<CSALineSetting>("T2ndClosing"))
        <div class="form-group">
            <label for="inputCapSwitcherType">Cap switcher type:</label>
            <select id="capSwitcherType" class="form-control" data-bind="value: CapSwitcherType, valueAllowUnset: false, attr: {'disabled': ($root.recordMode()===RecordMode.View ? true : undefined)}">
                <option value="0">0 - No closing control</option>
                <option value="11">11 - Pre-insertion HRPI</option>
                <option value="12">12 - Pre-insertion LRPI</option>
                <option value="2">2 - Sync closing</option>
            </select>
        </div>
        @Raw(dataContext.AddInputField<CSALineSetting>("StepSizeQ3"))
    </div>


}
@Html.RenderResource("GSF.Web.Model.Views.PagedViewModel.cshtml")
@section Scripts
{
    <script>
        @Raw(dataContext.RenderViewModelConfiguration<CSALineSetting, DataHub>(ViewBag, "LineID"))
        @Raw(AppModel.RenderAbstract<Line>("AssetKey"))


        function truncate(data, value) {
            var string = value == null ? '' : value;
            if (data.Name.indexOf('Password') > -1)
                string = string.replace(/./g, '*' );
            if (string != null && string.length > 40)
                string = string.slice(0, 37) + '...';
            return string;
        }


    </script>
}