@*******************************************************************************************************
    //  Index.cshtml - Gbtc
    //
    //  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
    //
    //  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
    //  the NOTICE file distributed with this work for additional information regarding copyright ownership.
    //  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
    //  file except in compliance with the License. You may obtain a copy of the License at:
    //
    //      http://opensource.org/licenses/MIT
    //
    //  Unless agreed to in writing, the subject software distributed under the License is distributed on an
    //  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
    //  License for the specific language governing permissions and limitations.
    //
    //  Code Modification History:
    //  ----------------------------------------------------------------------------------------------------
    //  01/15/2016 - J. Ritchie Carroll
    //       Generated original version of source code.
    //
    //*****************************************************************************************************@
@using System
@using System.Threading
@using GSF
@using GSF.Data
@using GSF.Identity
@using GSF.IO
@using GSF.Reflection
@using RazorEngine.Templating
@using GSF.Web
@using System.Net.Http
@using openEAS.Model
@using openEAS
@using openEASSandBox
@using Newtonsoft.Json
@using GSF.Web.Shared
@using GSF.Web
@using GSF.Web.Model
@using Event = openXDA.Model.Event

@inherits ExtendedTemplateBase<AppModel>
@{

    DataContext dataContext = ViewBag.DataContext;

    HttpRequestMessage request = ViewBag.Request;
    Dictionary<string, string> parameters = request.QueryParameters();

    if (parameters.ContainsKey("EventID"))
    {
        ViewBag.EventID = parameters["EventID"];
    }

    Event evt = dataContext.Table<Event>().QueryRecordWhere("ID = {0}", ViewBag.EventID);
    CSAResult result = dataContext.Table<CSAResult>().QueryRecordWhere("EventID = {0}", evt.ID);

    CSALineSetting setting = dataContext.Table<CSALineSetting>().QueryRecordWhere("LineID = {0}", evt.LineID);
    if (setting == null)
    {
        setting = dataContext.Table<CSALineSetting>().NewRecord();
    }


    if (setting.IsMonLocAtCapCSW == 0)
    {
        ViewBag.MoreFields = dataContext.Table<CSAGPResult>().QueryRecordWhere("CSAResultID = {0}", result.ID);
    }
    else {
        ViewBag.MoreFields = dataContext.Table<CSASPResult>().QueryRecordWhere("CSAResultID = {0}", result.ID);
    }

    string theData = JsonConvert.SerializeObject(result);
    string moreData = JsonConvert.SerializeObject(ViewBag.MoreFields);
    string ServiceName = "CSAService";


}
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" style="height: 100%;">
<head id="Head1" runat="server">
    <title>@ServiceName</title>

    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <link rel="shortcut icon" type="image/ico" href="~/favicon.ico" />
    <link href="@("/@GSF/Web/Shared/Content/bootstrap.css")" rel="stylesheet">
    <style>
        .table{
            max-width: 400px
        }
    </style>
</head>

<body>
    <table class="table">
        <thead>
            <tr><td colspan="2" align="center">@ServiceName</td></tr>
        </thead>
        <tbody></tbody>
    </table>

</body>
</html>
<script src="@Resources.Root/Shared/Scripts/jquery.js"></script>
<script src="@Resources.Root/Shared/Scripts/bootstrap.js"></script>
<script>
    var record = JSON.parse('@Raw(theData)');
    var moreData = JSON.parse('@Raw(moreData)');

    $.each(Object.keys(record), function(index, key){
        $('.table tbody').append('<tr><td>'+ key +':</td><td>' + record[key] + '</td></tr>');
    });

    $.each(Object.keys(moreData), function (index, key) {
        if(key != "ID" && key != "CSAResultID")
            $('.table tbody').append('<tr><td>' + key + ':</td><td>' + moreData[key] + '</td></tr>');
    });

</script>