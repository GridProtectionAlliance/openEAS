-- Add custom data tables
-- for analysis results here

-- Example:
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'CSAResult')
BEGIN

CREATE TABLE CSAResult
(
	ID INT IDENTITY(1, 1) NOT NULL PRIMARY KEY,
    EventID INT NOT NULL UNIQUE REFERENCES Event(ID),
    IsDataError VARCHAR(20) NOT NULL,
	IsCapSwitch VARCHAR(20) NOT NULL,
	IsCapSwitchCondL VARCHAR(20) NOT NULL,
	OutFrequency FLOAT NOT NULL,
	OutVoltagesMax FLOAT NOT NULL,
	OutVoltagesMean FLOAT NOT NULL,
	OutVTHDFlag VARCHAR(20) NOT NULL,
	OutVTHDBefore FLOAT NOT NULL,
	OutVTHDAfter FLOAT NOT NULL,
	OutVTHDIncrease FLOAT NOT NULL

)

CREATE NONCLUSTERED INDEX IX_CSAResult_EventID
ON CSAResult(EventID ASC)

END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'CSAGPResult')
BEGIN

CREATE TABLE CSAGPResult
(
	ID INT IDENTITY(1, 1) NOT NULL PRIMARY KEY,
    CSAResultID INT NOT NULL UNIQUE REFERENCES CSAResult(ID),
	OutQConditionRPBFlag VARCHAR(20) NOT NULL,
	OutQConditionMRPC FLOAT NOT NULL,
	OutQConditionRPCA FLOAT NOT NULL,
	OutQConditionRPCB FLOAT NOT NULL,
	OutQConditionRPCC FLOAT NOT NULL,
	OutQConditionMPFI FLOAT NOT NULL,
	OutQConditionPFA FLOAT NOT NULL,
	OutQConditionPFB FLOAT NOT NULL,
	OutQConditionPFC FLOAT NOT NULL,
	OutRestrikeFlag VARCHAR(20) NOT NULL,
	OutRestrikeNum INT NOT NULL,
	OutRestrikePHA VARCHAR(20) NOT NULL,
	OutRestrikePHB VARCHAR(20) NOT NULL,
	OutRestrikePHC VARCHAR(20) NOT NULL,
)

CREATE NONCLUSTERED INDEX IX_CSAGPResult_CSAResultID
ON CSAGPResult(CSAResultID ASC)

END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'CSASPResult')
BEGIN

CREATE TABLE CSASPResult
(
	ID INT IDENTITY(1, 1) NOT NULL PRIMARY KEY,
    CSAResultID INT NOT NULL UNIQUE REFERENCES CSAResult(ID),
	OutCapXingANotFailedEnergizing VARCHAR(20) NOT NULL,
	OutCapXingAReactivePowerContribution FLOAT NOT NULL,
	OutCapXingAReactivePowerDeviation FLOAT NOT NULL,
	OutCapXingBNotFailedEnergizing VARCHAR(20) NOT NULL,
	OutCapXingBReactivePowerContribution FLOAT NOT NULL,
	OutCapXingBReactivePowerDeviation FLOAT NOT NULL,
	OutCapXingCNotFailedEnergizing VARCHAR(20) NOT NULL,
	OutCapXingCReactivePowerContribution FLOAT NOT NULL,
	OutCapXingCReactivePowerDeviation FLOAT NOT NULL,
	OutRestrikeEnhancedADeenergizationOperation VARCHAR(20) NOT NULL,
	OutRestrikeEnhancedADeenergizationLevel VARCHAR(20) NOT NULL,
	OutRestrikeEnhancedBDeenergizationOperation VARCHAR(20) NOT NULL,
	OutRestrikeEnhancedBDeenergizationLevel VARCHAR(20) NOT NULL,
	OutRestrikeEnhancedCDeenergizationOperation VARCHAR(20) NOT NULL,
	OutRestrikeEnhancedCDeenergizationLevel VARCHAR(20) NOT NULL,
	OutSyncAPhaseAngleDeviation FLOAT NOT NULL,
	OutSyncAStatus VARCHAR(20) NOT NULL,
	OutSyncBPhaseAngleDeviation FLOAT NOT NULL,
	OutSyncBStatus VARCHAR(20) NOT NULL,
	OutSyncCPhaseAngleDeviation FLOAT NOT NULL,
	OutSyncCStatus VARCHAR(20) NOT NULL,
)

CREATE NONCLUSTERED INDEX IX_CSASPResult_CSAResultID
ON CSASPResult(CSAResultID ASC)

END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'CSALineSetting')
BEGIN

CREATE TABLE CSALineSetting(
	ID INT IDENTITY(1, 1) NOT NULL PRIMARY KEY,
    LineID INT NOT NULL UNIQUE REFERENCES Line(ID),
	NumArgsOut INT NULL,
	IsMonLocAtCapCSW INT NULL,
	VTHDLimit FLOAT NULL,
	UnbalLimit FLOAT NULL,
	CapGrounding INT NULL,
	RefQ3 FLOAT NULL,
	NormalUpper FLOAT NULL,
	NormalLower FLOAT NULL,
	PrematureUpper FLOAT NULL,
	PrematureLower FLOAT NULL,
	DelayedUpper FLOAT NULL,
	DelayedLower FLOAT NULL
)

CREATE NONCLUSTERED INDEX IX_CSALineSetting_LineID
ON CSALineSetting(LineID ASC)

END
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_NAME = 'HasCSAResult')
BEGIN
	DROP FUNCTION HasCSAResult
END
GO

CREATE FUNCTION HasCSAResult
(
	@eventID INT
)
RETURNS INT
AS BEGIN
	DECLARE @hasCSAResult INT

	SELECT @hasCSAResult = COUNT(*)
	FROM CSAResult
	WHERE
		EventID = @eventID AND
		IsCapSwitch = 'Yes'

	RETURN @hasCSAResult
END
GO

MERGE EASExtension AS Target
USING (VALUES('CSAService', 'HasCSAResult')) AS Source(ServiceName, HasResultFunction)
ON Source.ServiceName = Target.ServiceName
WHEN MATCHED THEN
    UPDATE SET HasResultFunction = Source.HasResultFunction
WHEN NOT MATCHED THEN
    INSERT VALUES(Source.ServiceName, Source.HasResultFunction);
GO